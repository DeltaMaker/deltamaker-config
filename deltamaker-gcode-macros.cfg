#
# Date: 12/28/2022
#
# DeltaMaker printer config file: deltamaker-gcode-macros.cfg
#
# Defines the gcode_macros used by OctoPrint config: config-deltamaker.yaml
#

[gcode_macro UNLOAD_FILAMENT]
gcode:
   {% if printer.idle_timeout.state == "Printing" %}
     M118 // UNLOAD_FILAMENT - must pause printing first
   {% else %}
   G28
   M118 // Caution: Begin nozzle heating
   M109 S230
   G91
   G92 E0.0
   G1 E10 F100
   M104 S0
   M118 // Retracting filament from nozzle
   G1 E10 F200
   G1 E-10 F100
   G1 E-10 F200
   G92 E0.0
   G1 E-50 F500
   G1 E-50 F1000
   G1 E-50
   G1 E-50
   G90
   M18
   M118 // Filament unloaded
   {% endif %}

[homing_override]
gcode:
   HOMING_OVERRIDE

# Homing the printer also sets the gcode offset for the current tool
[gcode_macro HOMING_OVERRIDE]
gcode:
   {% set svv = printer.save_variables.variables %}
   {% set must_center = 0 %}
   {% if svv %}
      {% set must_center = svv.get("homing_must_center", 0) %}
   {% endif %}
   M118 must_center={must_center}
   PROBE_POWER_OFF
   {% if must_center > 0 %}
      M118 HOMING_MUST_CENTER
      G90
      G1 X0 Y0 F6000
      SAVE_VARIABLE VARIABLE=homing_must_center VALUE=0
   {% endif %}
   RESTORE_GCODE_OFFSET
   G28
   G91
   G1 Z-5 F6000
   G90
   START_PRINT


# Make gcode offsets persistent after restart

[gcode_macro SET_GCODE_OFFSET]
rename_existing: _SET_GCODE_OFFSET
gcode:
    {% if printer.save_variables.variables.gcode_offsets %}
        {% set offsets = printer.save_variables.variables.gcode_offsets %}
    {% else %} 
        {% set offsets = {'x': None,'y': None,'z': None} %}
    {% endif %}
    
    {% set ns = namespace(offsets={'x': offsets.x,'y': offsets.y,'z': offsets.z}) %}
    
    _SET_GCODE_OFFSET {% for p in params %}{'%s=%s '% (p, params[p])}{% endfor %}

    {%if 'X' in params %}{% set null = ns.offsets.update({'x': params.X|float}) %}{% endif %}
    {%if 'Y' in params %}{% set null = ns.offsets.update({'y': params.Y|float}) %}{% endif %}
    {%if 'Z' in params %}{% set null = ns.offsets.update({'z': params.Z|float}) %}{% endif %}
    {%if 'Z_ADJUST' in params %}
        {%if ns.offsets.z == None %}{% set null = ns.offsets.update({'z': 0}) %}{% endif %}
        {% set null = ns.offsets.update({'z': ns.offsets.z + (params.Z_ADJUST | float)}) %}
    {% endif %}
    SAVE_VARIABLE VARIABLE=gcode_offsets VALUE="{ns.offsets}"

[delayed_gcode LOAD_GCODE_OFFSETS]
initial_duration: 2
gcode:  
    {% if printer.save_variables.variables.gcode_offsets %}
        {% set offsets = printer.save_variables.variables.gcode_offsets %}

        _SET_GCODE_OFFSET {% for axis, offset in offsets.items() if offsets[axis] %}{ "%s=%s " % (axis, offset) }{% endfor %}

        { action_respond_info("Loaded gcode offsets from saved variables [%s]" % (offsets)) }
    {% endif %}

[gcode_macro SAVE_GCODE_OFFSET]
variable_save_probe: 0
gcode:
   {% set svv = printer.save_variables.variables %}
   {% set tool = svv.get("current_tool", 0) %}
   {% set offset_key = 'tool' ~ tool ~ '_offsets' %}
   {% if save_probe %}
      SET_NOZZLE_ZERO
      SET_GCODE_VARIABLE MACRO=SAVE_GCODE_OFFSET VARIABLE=save_probe VALUE=0
   {% endif %}
   {% set homing = printer.gcode_move.homing_origin %}
   {% set ns = namespace(offsets={'x': homing.x,'y': homing.y,'z': homing.z}) %}
   SAVE_VARIABLE VARIABLE={offset_key} VALUE="{ns.offsets}"

[gcode_macro RESTORE_GCODE_OFFSET]
gcode:
   {% set svv = printer.save_variables.variables %}
   {% set tool = svv.get("current_tool", 0) %}
   {% set offset_key = 'tool' ~ tool ~ '_offsets' %}

   {% set offsets = svv.get(offset_key, None) %}
   {% if offsets != None %}
      SET_GCODE_OFFSET X={offsets.x} Y={offsets.y} Z={offsets.z}
   {% endif %}  
   M118 RESTORE_GCODE_OFFSET X={offsets.x} Y={offsets.y} Z={offsets.z}
   SET_GCODE_VARIABLE MACRO=SAVE_GCODE_OFFSET VARIABLE=save_probe VALUE=0


[gcode_macro _SAVE_GCODE_OFFSET] 
variable_save_probe: 0
gcode:
   {% set svv = printer.save_variables.variables %}
   {% set tool = svv.get("current_tool", 0) %}
   {% set x_key = 'tool' ~ tool ~ '_x_offset' %}
   {% set y_key = 'tool' ~ tool ~ '_y_offset' %}
   {% set z_key = 'tool' ~ tool ~ '_z_offset' %}
   {% set probe_key = 'tool' ~ tool ~ '_probe_z_offset' %}

   M118 SAVE_GCODE_OFFSET Z={'%0.4f'|format(printer.gcode_move.homing_origin.z)}
   {% if save_probe %}
      SET_NOZZLE_ZERO
      SET_GCODE_VARIABLE MACRO=SAVE_GCODE_OFFSET VARIABLE=save_probe VALUE=0
   {% endif %}
   SAVE_VARIABLE VARIABLE={x_key} VALUE={'%0.4f'|format(printer.gcode_move.homing_origin.x)}
   SAVE_VARIABLE VARIABLE={y_key} VALUE={'%0.4f'|format(printer.gcode_move.homing_origin.y)}
   SAVE_VARIABLE VARIABLE={z_key} VALUE={'%0.4f'|format(printer.gcode_move.homing_origin.z)}
 
[gcode_macro _RESTORE_GCODE_OFFSET]
gcode:
   {% set svv = printer.save_variables.variables %}
   {% set tool = svv.get("current_tool", 0) %}
   {% set x_key = 'tool' ~ tool ~ '_x_offset' %}
   {% set y_key = 'tool' ~ tool ~ '_y_offset' %}
   {% set z_key = 'tool' ~ tool ~ '_z_offset' %}
   {% set probe_key = 'tool' ~ tool ~ '_probe_z_offset' %}

   {% set x_offset = svv.get(x_key, 0) %}
   {% set y_offset = svv.get(y_key, 0) %}
   {% set z_offset = svv.get(z_key, 0) %}
   {% set probe_z_offset = svv.get(probe_key, 0) %}
   M118 RESTORE_GCODE_OFFSET X={x_offset} Y={y_offset} Z={z_offset} P={probe_z_offset}
   SET_GCODE_OFFSET X={x_offset} Y={y_offset} Z={z_offset}
   SET_GCODE_VARIABLE MACRO=SAVE_GCODE_OFFSET VARIABLE=save_probe VALUE=0

[gcode_macro SET_PROBE_ZERO]
gcode:
   ## after touch probe is triggered and probe.last_z_result is set,
   ##  set the tool offset, based on current probe offset
   {% set svv = printer.save_variables.variables %}
   {% set tool = svv.get("current_tool", 0) %}
   {% set z_key = 'tool' ~ tool ~ '_z_offset' %}
   {% set probe_key = 'tool' ~ tool ~ '_probe_z_offset' %}
   {% set probeConfig = printer["configfile"].config["probe"] %}
   {% set cfg_z_offset = probeConfig.get("z_offset", 0)|float %}
   M118 // cfg_z_offset = {cfg_z_offset}
   {% set probe_z_offset = svv.get(probe_key, cfg_z_offset) %}
   {% set z_offset = printer.probe.last_z_result - probe_z_offset %}
   M118 SET_PROBE_ZERO T={tool} p={probe_z_offset} Z={z_offset}
   SAVE_VARIABLE VARIABLE={z_key} VALUE={'%0.4f'|format(z_offset)}
   RESTORE_GCODE_OFFSET

[gcode_macro SET_NOZZLE_ZERO]
gcode:
   ## adjust the probe offset while the nozzle is at desired z=0
   {% set svv = printer.save_variables.variables %}
   {% set tool = svv.get("current_tool", 0) %}
   {% set z_key = 'tool' ~ tool ~ '_z_offset' %}
   {% set z_offset = svv.get(z_key, 0) %}
   {% set probe_key = 'tool' ~ tool ~ '_probe_z_offset' %}
   {% set probeConfig = printer["configfile"].config["probe"] %}
   {% set cfg_z_offset = probeConfig.get("z_offset", 0)|float %}
   {% set probe_z_offset = svv.get(probe_key, cfg_z_offset) %}
   {% set z_diff = printer.gcode_move.homing_origin.z - z_offset %}
   {% set probe_z_offset = probe_z_offset - z_diff %}
   M118 SET_NOZZLE_ZERO T={tool} P={probe_z_offset} z={z_offset} dz={z_diff}
   SAVE_VARIABLE VARIABLE={probe_key} VALUE={'%0.4f'|format(probe_z_offset)}

[gcode_macro SET_Z_ZERO]
gcode:
   {% set T = params.T|default(-1)|int %}
   {% set svv = printer.save_variables.variables %}
   {% if T|int < 0 %}
      {% set tool = svv.get("current_tool", 0) %}
   {% else %}
      {% set tool = T %}
   {% endif %}
   M118 // SET_Z_ZERO T={tool}
   SAVE_VARIABLE VARIABLE=tool{tool}_z_offset VALUE={'%0.4f'|format(printer.gcode_move.position.z)}
   RESTORE_GCODE_OFFSET
   G90
   G1 Z0

[gcode_macro BED_LEVEL]
variable_active: 0
variable_advanced: 0
variable_probe_calibrate: 0
variable_z_drop: -4.5
variable_mesh_points: 13
variable_count: 0
gcode:
  M118 active={active}
  M118 advanced={advanced}
  M118 probe_calibrate={probe_calibrate}
  M118 z_drop={z_drop}
  M118 mesh_points={mesh_points}
  M118 count={count}

#[gcode_macro M106]
#gcode:
#  M118 M106 Ignored

#[gcode_macro M107]
#gcode:
#  M118 M107 Ignored

[gcode_macro M117.1]
gcode:
  M118 M117 Ignored

[gcode_macro M73.1]
variable_progress = -1
gcode:
   {% set P = params.P|default(0)|int %}
   M118 M73 P{P}
   SET_GCODE_VARIABLE MACRO=M73 VARIABLE=progress VALUE={P|int}

[gcode_macro DETECT_BED_HEIGHT]
gcode:
   G28
   G1 Z20 F6000
   PROBE
   SET_PROBE_ZERO

[gcode_macro AUTO_BED_MAPPING]
variable_retry: 0
gcode:
  M118 // {printer.idle_timeout.state}
  {% if printer.idle_timeout.state == "Printing" and retry < 2 %}
     M118 Ignored while printing.
     SET_GCODE_VARIABLE MACRO=AUTO_BED_MAPPING VARIABLE=retry VALUE={retry+1}
  {% else %}
     SET_GCODE_VARIABLE MACRO=AUTO_BED_MAPPING VARIABLE=retry VALUE=0
     {% if printer["gcode_macro BED_LEVEL"].advanced == 0 %}
        SET_GCODE_VARIABLE MACRO=BED_LEVEL VARIABLE=active VALUE=1
        #SAVE_GCODE_STATE NAME=auto_bed_mapping
        SET_VELOCITY_LIMIT VELOCITY=400 ACCEL=1000 ACCEL_TO_DECEL=1000
        BED_MESH_CLEAR
        DETECT_BED_HEIGHT
        BED_MESH_CALIBRATE
        G1 X0 Y0 F5000
     {% endif %}
  {% endif %}
  

[gcode_macro MOVE_NOZZLE_TO_BED]
variable_retry: 0
gcode:
  M118 // {printer.idle_timeout.state}
  {% if printer.idle_timeout.state == "Printing" and retry < 2 %}
     M118 // Ignored while printing.
     SET_GCODE_VARIABLE MACRO=MOVE_NOZZLE_TO_BED VARIABLE=retry VALUE={retry+1}
  {% else %}
     SET_GCODE_VARIABLE MACRO=MOVE_NOZZLE_TO_BED VARIABLE=retry VALUE=0
     G28
     G1 Z20 F6000
     G1 X0 Y0
     G1 Z0 F600
     SET_GCODE_VARIABLE MACRO=SAVE_GCODE_OFFSET VARIABLE=save_probe VALUE=1
  {% endif %}

[gcode_macro OLD_MOVE_PROBE_TO_BED]
gcode:
   {% set svv = printer.save_variables.variables %}
   {% set tool = svv.get("current_tool", 0) %}
   {% set probe_key = 'tool' ~ tool ~ '_probe_z_offset' %}
   {% set probe_z_offset = svv.get(probe_key, 0) %}

  M118 // {printer.idle_timeout.state}
  {% if printer.idle_timeout.state == "Printing" %}
     M118 // Ignored while printing.
  {% else %}
     G28
     G1 Z20 F6000
     PROBE
     SET_GCODE_VARIABLE MACRO=SAVE_GCODE_OFFSET VARIABLE=save_probe VALUE=1
     # lower tool by the probe z offset, then set z zero
     {% set probe_z_offset = - probe_z_offset %}
     SET_GCODE_OFFSET Z_ADJUST={probe_z_offset} MOVE=1 MOVE_SPEED=1
     SET_Z_ZERO
  {% endif %}

[gcode_macro TOO_LOW]
gcode:
  {% set step = 1.0 + params.STEP|default(0.05)|float %}
  # SET_VELOCITY_LIMIT ACCEL=1000
  SET_GCODE_OFFSET Z_ADJUST={step} MOVE=1
  SET_GCODE_OFFSET Z_ADJUST=-1.00 MOVE=1 

[gcode_macro TOO_HIGH]
gcode:
  {% set step = 1.0 - params.STEP|default(0.05)|float %}
  #	SET_VELOCITY_LIMIT ACCEL=1000
  SET_GCODE_OFFSET Z_ADJUST={step} MOVE=1
  SET_GCODE_OFFSET Z_ADJUST=-1.00 MOVE=1

[gcode_macro SAVE_AND_HOME]
variable_retry: 0
gcode:
  SAVE_GCODE_OFFSET
  M118 retry={retry}
  {% if printer.idle_timeout.state == "Printing" and retry < 2 %}
     M118 // Ignore HOME while printing.
     SET_GCODE_VARIABLE MACRO=SAVE_AND_HOME VARIABLE=retry VALUE={retry+1}
  {% else %}
     SET_GCODE_VARIABLE MACRO=SAVE_AND_HOME VARIABLE=retry VALUE=0

     {% if printer["gcode_macro BED_LEVEL"].advanced != 0 %} 
        ACCEPT
        SET_GCODE_VARIABLE MACRO=BED_LEVEL VARIABLE=advanced VALUE=0
     {% endif %} 
     G28
     {% if printer["gcode_macro BED_LEVEL"].active == 1 %}
        SET_GCODE_VARIABLE MACRO=BED_LEVEL VARIABLE=active VALUE=0
        SAVE_CONFIG
     {% endif %}
  {% endif %}

