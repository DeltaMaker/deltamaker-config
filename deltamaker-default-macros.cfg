#
# Date: 8/21/2023
#
# DeltaMaker printer config file: deltamaker-default-macros.cfg
#
# Defines the follow default base gcode_macros. 
#
#   1. START_PRINT
#   2. END_PRINT
#   3. PAUSE
#   4. RESUME
#   5. CANCEL
#   6. LAYER_CHANGE

##################################################
# Base Start and End G-Codes Macros
##################################################   

[gcode_macro START_PRINT_BASE]
gcode:
   G21
   G90
   M82
   {% if printer.toolhead.homed_axes != "xyz" %}
      G28
   {% endif %}
   BED_MESH_PROFILE LOAD="default"
   CLEAR_PAUSE


[gcode_macro START_PRINT_PURGE]
gcode:
   {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
   G21
   G90
   M82
   {% if printer.extruder.target != 0 %}
      M104 S{EXTRUDER_TEMP}
   {% else %}
      M104 S150
   {% endif %}

   ## move nozzle to purge area
   {% set max_z = printer.toolhead.axis_maximum.z|float %}
   {% set min_x = printer.toolhead.axis_minimum.x|float * 0.9 %}
   {% set min_y = printer.toolhead.axis_minimum.y|float * 0.9 %}
   {% set max_y = printer.toolhead.axis_maximum.y|float * 0.9 %}
   {% set extr = 80 %}
   G1 Z{max_z - 100} F3000
   G1 X{min_x} F3000
   M109 S{EXTRUDER_TEMP}
   G1 Z1 F3000
   G1 X{min_x} Y0 Z0.4
   G92 E0
   G3 X0 Y{min_y} I{max_y} J1 Z0.2 E{extr} F1000
   G92 E0
   G1 E-1 F2100
   G1 Z1


[gcode_macro END_PRINT_BASE]
gcode:
   TURN_OFF_HEATERS
   SAFE_LIFT X=0 Y=0
   G28

[gcode_macro LAYER_CHANGE]
gcode:
   # Inserted by slicer after moving Z to next layer height
   # Useful for logging print progress for restarting print after power loss
   # or for triggering a timelapse

[gcode_macro SAFE_LIFT]
gcode:
  {% set max_y = printer.toolhead.axis_maximum.y|float %}
  {% set max_z = printer.toolhead.axis_maximum.z|float - 5 %}
  ##### set defaults #####
  {% set x = params.X|default(0) %}
  {% set y = params.Y|default(max_y * 0.90) %}
  {% set z = params.Z|default(10)|float %}
  {% set e = params.E|default(1) %}
  ##### calculate safe lift position #####
  {% set act_z = printer.toolhead.position.z|float %}
  {% set lift_z = z|abs %}
  {% if act_z < (max_z - lift_z) %}
     {% set z_safe = lift_z %}
  {% else %}
     {% set z_safe = max_z - act_z %}
  {% endif %}
  SAVE_GCODE_STATE NAME=safe_lift
  SET_GCODE_OFFSET X=0 Y=0
  G91
  G1 E-{e} F2100
  G1 Z{z_safe}
  G90
  G1 X{x} Y{y} F2500
  RESTORE_GCODE_STATE NAME=safe_lift


##################################################
# Pause / Resume / Cancel Print
##################################################
# inspired from: https://ellis3dp.com/Print-Tuning-Guide/articles/useful_macros/pause_resume_filament.html
#
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        {% set park_x = 0 %}
        {% set park_y = printer.toolhead.axis_maximum.y|float * 0.9 %}                       ; park toolhead at back center
        G90                                                                                  ; absolute positioning
        G1 X{park_x} Y{park_y} F6000 
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

##################################################

[gcode_macro PAUSE1]
description: Pause the current print
#rename_existing: PAUSE_BASE
gcode:
  {% set z = printer.toolhead.position.z|round(3) %}
  SAVE_VARIABLE VARIABLE=pause_z VALUE={z}
  RESPOND MSG="Pausing at z={z}"
  PAUSE_BASE
  SAFE_LIFT {rawparams}
  ##### Restore to current Z #####
  {% set restore_z = printer.toolhead.position.z|float %}
  SET_GCODE_VARIABLE MACRO=RESUME1 VARIABLE=restore_z VALUE={restore_z}



[gcode_macro PAUSE2]
description: Pause the current print
#rename_existing: PAUSE_BASE
gcode:
  {% set max_y = printer.toolhead.axis_maximum.y|float %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  ##### set defaults #####
  {% set x = params.X|default(0) %}
  {% set y = params.Y|default(max_y * 0.90) %}
  {% set z = params.Z|default(10)|float %}
  {% set e = params.E|default(1) %}
  ##### calculate save lift position #####
  {% set act_z = printer.toolhead.position.z|float %}
  SAVE_VARIABLE VARIABLE=pause_z VALUE={act_z|round(3)}
  {% set lift_z = z|abs %}
  {% if act_z < (max_z - lift_z) %}
     {% set z_safe = lift_z %}
  {% else %}
     {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  RESPOND MSG="Pausing..."
  PAUSE_BASE
  G91
  G1 E-{e} F2100
  G1 Z{z_safe}
  G90
  G1 X{x} Y{y} F2500
  ##### Restore to current Z #####
  {% set restore_z = printer.toolhead.position.z|float %}
  SET_GCODE_VARIABLE MACRO=RESUME1 VARIABLE=restore_z VALUE={restore_z}

[gcode_macro RESUME1]
description: Resume the current print
#rename_existing: RESUME_BASE
variable_restore_z: 0
gcode:
  ##### Restore to previous Z #####
  {% if restore_z > 0 %}
    G90
    G1 Z{restore_z} F2500
  {% endif%}
  ##### set defaults #####
  {% set e = params.E|default(1) %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
     {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
     {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  SET_IDLE_TIMEOUT TIMEOUT=1800
  G91
  {% if printer["gcode_macro M600"].m600_enabled == 1 %}
     RESPOND MSG="Heating..."
     M109 S{printer["gcode_macro M600"].hotend_temp}
     RESPOND MSG="Loading filament..."
     G0 E50 F800
     G0 E30 F300
     M400
     M106 S255
     SET_GCODE_VARIABLE MACRO=M600 VARIABLE=m600_enabled VALUE=0
  {% else %}
     G1 E{e} F2100
  {% endif %}
  RESPOND MSG="Resuming..."
  RESUME_BASE {get_params}


[gcode_macro CANCEL_PRINT1]
description: Cancel the current print
#rename_existing: CANCEL_PRINT_BASE
gcode:
  RESPOND MSG="Printing canceled!"
  G28
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

##################################################
# Filament / Color Change
##################################################

[gcode_macro M600]
description: Filament change
variable_hotend_temp: 0
variable_m600_enabled: 0
gcode:
  {% set max_y = printer.toolhead.axis_maximum.y|float %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  ##### set defaults #####
  {% set x = params.X|default(0) %}
  {% set y = params.Y|default(max_y * 0.90) %}
  {% set z = params.Z|default(10)|float %}
  {% set e = params.E|default(1) %}
  ##### calculate save lift position #####
  {% set act_z = printer.toolhead.position.z|float %}
  {% set lift_z = z|abs %}
  {% if act_z < (max_z - lift_z) %}
     {% set z_safe = lift_z %}
  {% else %}
     {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  SAVE_GCODE_STATE NAME=M600_state
  SET_IDLE_TIMEOUT TIMEOUT=86400
  SET_GCODE_VARIABLE MACRO=M600 VARIABLE=m600_enabled VALUE=1
  SET_GCODE_VARIABLE MACRO=M600 VARIABLE=hotend_temp VALUE={printer.extruder.target}
  RESPOND MSG="Pausing..."
  PAUSE
  G91
  G1 E-{e} F2100
  G1 Z{z_safe}
  G90
  G1 X{x} Y{y} F2500
  RESPOND MSG="Unloading filament..."
  G91
  G0 E-10 F300
  G0 E-30 F800
  M400
  RESPOND MSG="Heating stopped!"
  M109 S0
  RESTORE_GCODE_STATE NAME=M600_state
  
[gcode_macro TMC]
gcode:
  DUMP_TMC STEPPER=stepper_a
  DUMP_TMC STEPPER=stepper_b
  DUMP_TMC STEPPER=stepper_c
  DUMP_TMC STEPPER=extruder

[gcode_macro ENDSTOPS_CALIBRATION]
description: Endstops Phase Calibration
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  {% if printer.toolhead.homed_axes != "xyz" %}
  G28
  {% endif %}
  G91
  G0 Z-80 F1500
  G28
  G91
  G0 Z-80 F1500
  G28
  G91
  G0 Z-80 F1500
  G28
  G91
  G0 Z-80 F1500
  G28
  G91
  G0 Z-80 F1500
  ENDSTOP_PHASE_CALIBRATE stepper=stepper_a
  ENDSTOP_PHASE_CALIBRATE stepper=stepper_b
  ENDSTOP_PHASE_CALIBRATE stepper=stepper_c
  M400
  G28
  {% endif %}


