#
# Date: 8/21/2023
#
# DeltaMaker printer config file: deltamaker-command-macros.cfg
#
# Defines the gcode_macros that are called from the OctoPrint command tab and sidebar macros.
#
# Octoprint calls the following gcode_macros from the "command tab"
#   1. AUTO_BED_MAPPING    - detects the bed height and performs a mesh bed leveling
#   2. MOVE_NOZZLE_TO_BED  - begins the "paper test" to 
#   3. TOO_HIGH
#   4. TOO_LOW
#   5. SAVE_AND_HOME
#   6. UNLOAD_FILAMENT
#

##### INCLUDE TOOLHEAD AND PROBE TYPE #####
[include /home/pi/deltamaker-config/deltamaker-example-macros.cfg]

##### INCLUDE AUTO_BED_MAPPING #####
[gcode_macro AUTO_BED_MAPPING]
variable_retry: 0
variable_max_temp: 50       # max nozzle temperature for probing with nozzle
gcode:
  #M118 // {printer.print_stats.state}
  {% if printer.print_stats.state == "Printing" and retry < 2 %}
     M118 Ignored while printing.
     SET_GCODE_VARIABLE MACRO=AUTO_BED_MAPPING VARIABLE=retry VALUE={retry+1}
  {% elif max_temp > 0 and printer.extruder.temperature > max_temp %}
     M118 // Nozzle too hot to probe.
  {% else %}
     SET_GCODE_VARIABLE MACRO=AUTO_BED_MAPPING VARIABLE=retry VALUE=0
     SET_GCODE_VARIABLE MACRO=SAVE_AND_HOME VARIABLE=save_config VALUE=1
     SET_GCODE_OFFSET X=0 Y=0
     ####SAVE_GCODE_OFFSET
     SAVE_GCODE_STATE NAME=current_state
        SET_VELOCITY_LIMIT VELOCITY=250 ACCEL=1000 ACCEL_TO_DECEL=1000
        BED_MESH_CLEAR
        DETECT_BED_HEIGHT
        BED_MESH_CALIBRATE
        #G1 X0 Y0 F6000
     RESTORE_GCODE_STATE NAME=current_state
     SAVE_AND_HOME
  {% endif %}
  
[gcode_macro MOVE_NOZZLE_TO_BED]
variable_retry: 0
variable_probe_first: 0
gcode:
  #M118 // {printer.print_stats.state}
  {% if printer.print_stats.state == "Printing" and retry < 2 %}
     M118 // Ignored while printing.
     SET_GCODE_VARIABLE MACRO=MOVE_NOZZLE_TO_BED VARIABLE=retry VALUE={retry+1}
  {% elif params.PROBE_FIRST|default(probe_first)|int == 1 %}
     {% set max_temp = printer["gcode_macro AUTO_BED_MAPPING"].max_temp %}
     {% if max_temp > 0 and printer.extruder.temperature > max_temp %}
        M118 // Nozzle too hot to probe.
        G28
     {% else %}
        DETECT_BED_HEIGHT
        SET_GCODE_VARIABLE MACRO=SAVE_PROBE_OFFSET VARIABLE=save_probe VALUE=1
     {% endif %}
  {% else %}
     SET_GCODE_VARIABLE MACRO=MOVE_NOZZLE_TO_BED VARIABLE=retry VALUE=0
     SET_GCODE_VARIABLE MACRO=SAVE_PROBE_OFFSET VARIABLE=save_probe VALUE=1
     G28
     G1 Z30 F6000
     G1 X0 Y0
     G1 Z0 F600
  {% endif %}

[gcode_macro TOO_LOW]
gcode:
  {% set step = params.STEP|default(0.05)|float %}
  {% if printer.toolhead.position.z|float > printer.toolhead.axis_maximum.z|float - 5 %}
    SET_GCODE_OFFSET Z_ADJUST={step}
  {% else %}
    {% set hop = 1.0 + step %}
    SET_GCODE_OFFSET Z_ADJUST={hop} MOVE=1
    SET_GCODE_OFFSET Z_ADJUST=-1.00 MOVE=1
  {% endif %}

[gcode_macro TOO_HIGH]
gcode:
  {% set step = params.STEP|default(0.05)|float %}
  {% if printer.toolhead.position.z|float > printer.toolhead.axis_maximum.z|float - 5 %}
    SET_GCODE_OFFSET Z_ADJUST={-step}
  {% else %}
    {% set hop = 1.0 - step %}
    SET_GCODE_OFFSET Z_ADJUST={hop} MOVE=1
    SET_GCODE_OFFSET Z_ADJUST=-1.00 MOVE=1
  {% endif %}

[gcode_macro SAVE_AND_HOME]
# Called after auto_bed_mapping, too_high, or too_low
#  to persist the new bed mesh and babystepping values
variable_retry: 0
variable_save_config: 0
gcode:
   SAVE_PROBE_OFFSET

   {% if printer.print_stats.state == "Printing" and retry < 2 %}
      M118 // Ignore HOME while printing.
      SET_GCODE_VARIABLE MACRO=SAVE_AND_HOME VARIABLE=retry VALUE={retry+1}
   {% else %}
      SET_GCODE_VARIABLE MACRO=SAVE_AND_HOME VARIABLE=retry VALUE=0
      G28
      {% if save_config > 0 %}
         SAVE_CONFIG
      {% endif %}
   {% endif %}

[gcode_macro SAVE_PROBE_OFFSET]
variable_save_probe: 0
gcode:
   {% if save_probe == 1 %}
      SET_GCODE_VARIABLE MACRO=SAVE_PROBE_OFFSET VARIABLE=save_probe VALUE=0
      {% set probe_z = printer.probe.last_z_result - printer.gcode_move.position.z %}
      #M118 // SAVE_PROBE_OFFSET current_z = {printer.gcode_move.position.z} last_probe = {printer.probe.last_z_result}
      #M118 // SAVE_PROBE_OFFSET probe_z = {probe_z} 

      {% set svv = printer.save_variables.variables %}
      {% set offset_key = 'tool' ~ svv.get("current_tool", 0) ~ '_offsets' %}
      {% set o = svv.get(offset_key, {'x': 0.0, 'y': 0.0, 'z': 0.0, 'probe_z': 0.0}) %}
      {% set ns = namespace(offsets={'x': o.x,'y': o.y,'z': o.z,'probe_z': probe_z|float|round(4)}) %}
      SAVE_VARIABLE VARIABLE={offset_key} VALUE="{ns.offsets}"
   {% endif %}


[delayed_gcode LOAD_GCODE_OFFSETS]
## Load from save_variables, at restart, gcode offsets for the current tool
initial_duration: 0.1
gcode:
   RESTORE_GCODE_OFFSET VERBOSE=1
   TURN_OFF_HEATERS
 
[homing_override]
gcode:
   SET_GCODE_VARIABLE MACRO=SAVE_PROBE_OFFSET VARIABLE=save_probe VALUE=0
   G28


#################

[gcode_macro SET_GCODE_OFFSET]
rename_existing: _SET_GCODE_OFFSET
gcode:
   {% set svv = printer.save_variables.variables %}
   {% set offset_key = 'tool' ~ svv.get("current_tool", 0) ~ '_offsets' %}
   {% set o = svv.get(offset_key, {'x': 0.0, 'y': 0.0, 'z': 0.0, 'probe_z': 0.0}) %}
   {% set ns = namespace(offsets={'x': o.x,'y': o.y,'z': o.z,'probe_z': o.probe_z}) %}

   _SET_GCODE_OFFSET {% for p in params %}{'%s=%s '% (p, params[p])}{% endfor %}

   {%if 'X' in params %}{% set null = ns.offsets.update({'x': params.X|float|round(4)}) %}{% endif %}
   {%if 'Y' in params %}{% set null = ns.offsets.update({'y': params.Y|float|round(4)}) %}{% endif %}
   {%if 'Z' in params %}{% set null = ns.offsets.update({'z': params.Z|float|round(4)}) %}{% endif %}
   {%if 'Z_ADJUST' in params %}
      {% set z_adjust = params.Z_ADJUST|float %}
      {% if printer["gcode_macro SAVE_PROBE_OFFSET"].save_probe == 0 %}
         {% set null = ns.offsets.update({'z': (ns.offsets.z + z_adjust)|round(4)}) %}
      {% endif %}
   {% endif %}
   SAVE_VARIABLE VARIABLE={offset_key} VALUE="{ns.offsets}"


[gcode_macro RESTORE_GCODE_OFFSET]
## restore gcode offset for current tool
## should be called after restart and toolchanges (default T0)
gcode:
   {% set svv = printer.save_variables.variables %}
   {% set offset_key = 'tool' ~ svv.get("current_tool", 0) ~ '_offsets' %}
   {% set offsets = svv.get(offset_key, None) %}
   {% if offsets != None %}
      _SET_GCODE_OFFSET X={offsets.x} Y={offsets.y} Z={offsets.z - offsets.probe_z|float}
   {% else %}
      ## initialize offset for current tool, using the z_offset from probe config
      {% set cfg_z = printer["configfile"].config["probe"].get("z_offset", 0.0)|float %}
      {% set ns = namespace(offsets={'x': 0.0, 'y': 0.0, 'z': 0.0, 'probe_z': cfg_z}) %}
      SAVE_VARIABLE VARIABLE={offset_key} VALUE="{ns.offsets}"
   {% endif %}

   {% if params.VERBOSE|default(0)|int == 1 %}
      {action_respond_info("restore gcode offset: %s = %s" % (offset_key, offsets|pprint))}
   {% endif %}
   SET_GCODE_VARIABLE MACRO=SAVE_PROBE_OFFSET VARIABLE=save_probe VALUE=0



#################

[gcode_macro DETECT_BED_HEIGHT]
# Use probe to detect the bed, after probe contact, update the Z gcode offset
variable_safe_z: 20
gcode:
   {% set max_temp = printer["gcode_macro AUTO_BED_MAPPING"].max_temp %}
   {% if max_temp == 0 or printer.extruder.temperature <= max_temp %}
      G28
      {% set last_z_before = printer.probe.last_z_result|float %}
      G1 Z{safe_z} F6000
      PROBE
      M118 last_z_result {last_z_before} -> {printer.probe.last_z_result|float}
      ##SET_GCODE_OFFSET Z={printer.probe.last_z_result|float}
      SET_PROBE_ZERO
   {% endif %}

   
[gcode_macro SET_PROBE_ZERO]
gcode:
   ## after touch probe is triggered and probe.last_z_result is set,
   ##  set the tool offset, based on current probe offset
   #M118 SET_PROBE_ZERO {printer.gcode_move.position.z} {printer.probe.last_z_result}
   {% set svv = printer.save_variables.variables %}
   {% set offset_key = 'tool' ~ svv.get("current_tool", 0) ~ '_offsets' %}
   {% set offsets = svv.get(offset_key, None) %}
   {% if offsets != None %}
      #M118 SET_PROBE_ZERO  probe_z={offsets.probe_z} z={offsets.z}
      SET_GCODE_OFFSET Z={printer.probe.last_z_result - offsets.probe_z}
      # move nozzle to Z0
      G1 Z0
   {% endif %}

[gcode_macro _SET_NOZZLE_ZERO]
gcode:
   ## adjust the probe_z offset while the nozzle is at desired z=0
   {% set svv = printer.save_variables.variables %}
   {% set offset_key = 'tool' ~ svv.get("current_tool", 0) ~ '_offsets' %}
   {% set offsets = svv.get(offset_key, None) %}

   ## update probe_z using difference from current and previous z offset
   {% set z_diff = printer.gcode_move.position.z - offsets.z %}
   {% set null = offsets.update({'probe_z': -z_diff|float|round(5)}) %}

   SAVE_VARIABLE VARIABLE={offset_key} VALUE="{offsets | pprint | replace("\n", "") | replace("\"", "\\\"")}"
   #M118 SET_NOZZLE_ZERO {offset_key} = {offsets | pprint} dz={z_diff}


[gcode_macro T0]
gcode:
  M118 T0 Ignored
  

##################################################
# Unload Filament Macro
##################################################   

[gcode_macro UNLOAD_FILAMENT]
gcode:
   {% if printer.print_stats.state == "Printing" %}
     M118 // Must pause printing before unloading
   {% else %}
      G28
      M118 // Caution: Begin nozzle heating
      M109 S230
      G91
      G92 E0.0
      G1 E10 F100
      M104 S0
      M118 // Retracting filament from nozzle
      G1 E10 F200
      G1 E-10 F100
      G1 E-10 F200
      G92 E0.0
      G1 E-50 F500
      G1 E-50 F1000
      G1 E-50
      G1 E-50
      G1 E-50
      G90
      M18
      M118 // Filament unloaded
   {% endif %}
